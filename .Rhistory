)
}
if(is.null(contracts)) return(p)
for(contract in contracts){
contract_dayuse <- group_by(meters_weekly_agg, contract_id, DayofWeek) %>%
summarise(MeanUse = mean(Mean_con)) %>% filter(contract_id == contract)
contract_dayuse$DayofWeek<- factor(contract_dayuse$DayofWeek, levels = c('Monday','Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'))
contract_dayuse <- contract_dayuse[order(contract_dayuse$DayofWeek),]
p <-  add_trace(p,
r = contract_dayuse$MeanUse,
theta = c('Monday','Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'),
name = paste0("Contract ", contract)
)
}
return(p)
}
# Seasons
seasonalCompareClusters <- function(clusts, meters_season_agg, cluster_ids = NULL, contracts = NULL, title = ""){
p <- plot_ly(
type = 'scatterpolar',
fill = 'toself'
) %>%
layout(annotations = list(yref='paper',xref="paper",y=1,x=0.5, text=title,showarrow=F, font = list(size = 36)),
legend = list(
font = list(size = 18)),
polar = list(
radialaxis = list(
visible = T
),
angularaxis = list(
tickfont = list(
size = 16
),
rotation = 90,
direction = 'clockwise'
)
)
)
clust_list <- unique(clusts$cluster)
if(!is.null(cluster_ids)) clust_list <- cluster_ids
for(cluster in clust_list){
cluster_dayuse <- filter(meters_season_agg, contract_id %in% clusts$service_id[which(clusts$cluster == cluster)]) %>%
group_by(season) %>%
summarise(MeanUse = mean(Mean_con))
cluster_dayuse$season<- factor(cluster_dayuse$season, levels = c('Summer','Autumn', 'Winter', 'Spring'))
cluster_dayuse <- cluster_dayuse[order(cluster_dayuse$season),]
print(cluster_dayuse)
p <-  add_trace(p,
r = cluster_dayuse$MeanUse,
theta = c('Summer','Autumn', 'Winter', 'Spring'),
name = paste0("Cluster ", cluster)
)
}
if(is.null(contracts)) return(p)
for(contract in contracts){
contract_dayuse <- group_by(meters_season_agg, contract_id, season) %>%
summarise(MeanUse = mean(Mean_con)) %>% filter(contract_id == contract)
contract_dayuse$season<- factor(contract_dayuse$season, levels = c('Summer','Autumn', 'Winter', 'Spring'))
contract_dayuse <- contract_dayuse[order(contract_dayuse$season),]
p <-  add_trace(p,
r = contract_dayuse$MeanUse,
theta =  c('Summer','Autumn', 'Winter', 'Spring'),
name = paste0("Contract ", contract)
)
}
return(p)
}
# to compare all clusters together
benchmark(clust_obj = clusters, aggregates_list = consumption_averages, plot_title = "All clusters")
customer_forecast_ets(meter_sample,plot_type = 'line',pdf_file = 'fcast')
#Conduct 24 hour consumption forecast for aggregatre consumption from the list of contracts passed to the function
# NOTE: This forecast could take few minutes to finish
hourly_forecasst(meter_sample,plot_type = 'line',pdf_file = 'fcast')
?as.Date()
library(water)
lubridate::as_date()
knitr::opts_chunk$set(echo = TRUE)
#Conduct 24 hour consumption forecast for aggregatre consumption from the list of contracts passed to the function
# NOTE: This forecast could take few minutes to finish
hourly_forecasst(meter_sample,plot_type = 'line',pdf_file = 'fcast')
devtools::use_vignette("water-vignette")
help(consumption_vis)
help(leak_detection)
leak_detection(meter_sample,method = 'min',pdf_file = 'test')
library(water)
document()
build()
pack <- "water"
path <- find.package(pack)
system(paste(shQuote(file.path(R.home("bin"), "R")),
"CMD", "Rd2pdf", shQuote(path)))
document()
build()
system(paste(shQuote(file.path(R.home("bin"), "R")),
"CMD", "Rd2pdf", shQuote(path)))
document()
document()
system(paste(shQuote(file.path(R.home("bin"), "R")),
"CMD", "Rd2pdf", shQuote(path)))
document()
document()
build()
system(paste(shQuote(file.path(R.home("bin"), "R")),
"CMD", "Rd2pdf", shQuote(path)))
system(paste(shQuote(file.path(R.home("bin"), "R")),
"CMD", "Rd2pdf", shQuote(path)))
document()
build
build()
library(water)
vignette(water)
vignette(,package = water)
browseVignettes(water)
library(water)
browseVignettes(water)
browseVignettes("water")
help(water)
??water
help("man/consumption_cal)
""
"
knitr::opts_chunk$set(echo = TRUE)
# Load the package
library(water, quietly = T)
help(water)
help(consumption_vis)
document()
help(package = "water", help_type = "html")
library(water)
library(water)
browseVignettes(water)
document()
build
build()
library(water)
browseVignettes(water)
library(water)
browseVignettes(water)
document()
browseVignettes("water")
help(water)
demo(water)
devtools::build_vignettes()
browseVignettes(water)
document()
build()
library(water)
browseVignettes(water)
browseVignettes(all)
browseVignettes(package = 'water')
browseVignettes(package = 'all')
browseVignettes("water")
browseVignettes(dplyr)
browseVignettes('ts')
browseVignettes('tidyverse')
knitr::opts_chunk$set(echo = TRUE)
help(water)
# Install the package from the repository, enter your bitbucket username and password in the arguments
devtools::install_bitbucket('cbergmeir/yvw/Package/water@master',
quiet = FALSE, auth_user = '', password = '')
# Install the package from the repository, enter your bitbucket username and password in the arguments
devtools::install_bitbucket('cbergmeir/yvw/Package/water@master',
quiet = FALSE, auth_user = 'ozeidi', password = 'WadiFida*net1*MONASH')
# Load the package
library(water, quietly = T)
help(water)
browseVignettes(water)
vignette(water)
vignette(, package = water)
knitr::opts_chunk$set(echo = TRUE)
# Load the package
library(water, quietly = T)
# Load the package
library(water, quietly = T)
getwd()
#Read toy dataset for demonstration
meter_sample <-read_from_csv('data/sample_meter.csv',align_and_pad = TRUE)
features <- extract_features(meter_sample)
features <- read.csv("../data/clean_features_potable_water.csv")
features <- extract_features(meter_sample)
consumption_averages <- calculate_consumption_aggregates(timeseries_list = meter_sample, filename = "cons_avgs.rds")  # note that if a filename is not given, the results won't be saved to disk
# to compare all clusters together
benchmark(clust_obj = clusters, aggregates_list = consumption_averages, plot_title = "All clusters")
clusters <- calculate_clusters(features, k_max = 8)
features <- read.csv("../data/clean_features_potable_water.csv")
features <- read.csv("data/clean_features_potable_water.csv")
clusters <- calculate_clusters(features, k_max = 8)
clusters$PCA.plot
consumption_averages <- calculate_consumption_aggregates(timeseries_list = meter_sample, filename = "cons_avgs.rds")  # note that if a filename is not given, the results won't be saved to disk
# to compare all clusters together
benchmark(clust_obj = clusters, aggregates_list = consumption_averages, plot_title = "All clusters")
library(plotly)
# to compare all clusters together
benchmark(clust_obj = clusters, aggregates_list = consumption_averages, plot_title = "All clusters")
library(devtools)
# Install the package from the repository, enter your bitbucket username and password in the arguments
devtools::install_bitbucket('cbergmeir/yvw/Package/water@master',
quiet = FALSE, auth_user = 'ozeidi', password = 'WadiFdia*net1*MONASH')
knitr::opts_chunk$set(echo = TRUE)
# Load the package
library(water, quietly = T)
# Load the package
library(water, quietly = T)
getwd()
#Read toy dataset for demonstration
meter_sample <-read_from_csv('data/sample_meter.csv',align_and_pad = TRUE)
library(Matrix)
library(tidyverse)
library(xgboost)
library(caret)
?readMM
library(Matrix)
library(tidyverse)
library(xgboost)
library(caret)
# Load training features as sparse matrix
tfidf.scaled <- readMM('train_features_3500_feats_scaled.mtx')
# Transform to Dataframe
tfidf.scaled <- as.data.frame(as.matrix(tfidf.scaled))
# Assign labels
labels <- read.table('data/training_labels_final.txt', sep = ' ', header=F) %>% rename(label = V2)
tfidf.scaled$label <- factor(labels$label)
# Convert to XGB friendly format
f <- label ~ .
trainM <- sparse.model.matrix(f, tfidf.scaled)
# Train classifier (takes ~ 2hrs)
start <- Sys.time()
model <- xgboost(trainM,
label = as.integer(tfidf.scaled$label)-1,
eta = 0.05,
max_depth = 6,
nround = 500,
subsample = 0.8,
gamma = 0.5,
min_child_weight = 1,
colsample_bytree=0.6,
eval_metric = 'merror',
num_class = 23,
verbose = T,
verbose_eval = T,
silent = F)
print(Sys.time() - start)
# Save model
write_rds(model, 'xgb_r_3500_scaled.rds')
# Load test features and dummy labels (ensuring factors have same levels as training)
test <- readMM('test_features_3500_feats_scaled.mtx')
test$label = factor(1, levels=1:nlevels(tfidf.scaled$label), labels=levels(tfidf.scaled$label))
# Convert to XGB friendly format
test <- as.data.frame(as.matrix(test))
test$label <- as.factor(labels_test$label)
f <- label ~ .
testM <- sparse.model.matrix(f, test)
# Prediction
preds <- predict(model, testM)
# Refactor predictions to match training labels
preds.f <- factor(preds+1, levels=1:nlevels(test$label), labels=levels(test$label))
# Get macro-f1
cm.c <- as.matrix(confusionMatrix(preds.f, test$label), what = 'classes')
macro.f1 <- mean(cm.c[7,])
# Export predictions
docs <- paste0('te_doc_', seq(1, length(test$label)))
final.df <- as.data.frame(cbind(docs, as.character(preds.f)))
final.df %>% write.table('final_test_labels.txt', sep=' ', col.names=F, row.names=F, quote=F)
write.csv(as.character(preds.f))
library(Matrix)
library(tidyverse)
library(xgboost)
library(caret)
install.packages("xgboost")
library(xgboost)
library(caret)
# Load training features as sparse matrix
tfidf.scaled <- readMM('train_features_3500_feats_scaled.mtx')
getwd()
# Load training features as sparse matrix
tfidf.scaled <- readMM('train_features_3500_feats_scaled.mtx')
setwd()
getwd()
setwd("C:/Users/ozeidi/Desktop/MDS/04.2018S2/FIT5149/00. Assessment/group22_ass2group")
# Load training features as sparse matrix
tfidf.scaled <- readMM('train_features_3500_feats_scaled.mtx')
knitr::opts_chunk$set(echo = TRUE)
# Install package dependencies
# Devtools is needed fo installing Non-Standard packages from github and other repos
install.package('devtools')
# Install package dependencies
# Devtools is needed fo installing Non-Standard packages from github and other repos
install.packages('devtools')
# Install the package from the repository, enter your bitbucket username and password in the arguments
devtools::install_bitbucket('cbergmeir/yvw/Package/water@master',
quiet = FALSE, auth_user = 'ozeidi', password = 'WadiFida*net1*MONASH')
library(devtools)
# Install the package from the repository, enter your bitbucket username and password in the arguments
devtools::install_bitbucket('cbergmeir/yvw/Package/water@master',
quiet = FALSE, auth_user = 'ozeidi', password = 'WadiFida*net1*MONASH')
# Install the package from the repository, enter your bitbucket username and password in the arguments
devtools::install_bitbucket('cbergmeir/yvw/Package/water@master',
quiet = FALSE, auth_user = 'ozeidi', password = 'WadiFida*net1*MONASH')
knitr::opts_chunk$set(echo = TRUE)
# Load the package
library(water, quietly = T)
# Load the package
library(water, quietly = T)
getwd()
#Read toy dataset for demonstration
meter_sample <-read_from_csv('data/sample_meter.csv',align_and_pad = TRUE)
# optionally write the results to a csv file to use it later
write.csv(features, "data/my_features.csv", row.names = FALSE)
features <- extract_features(meter_sample)
features <- read.csv("data/clean_features_potable_water.csv")
clusters <- calculate_clusters(features, k_max = 8)
print(paste("Final number of Clusters:", clusters$k))
head(clusters$cluster_assignment, 10)
clusters$PCA.plot
consumption_averages <- calculate_consumption_aggregates(timeseries_list = meter_sample, filename = "cons_avgs.rds")  # note that if a filename is not given, the results won't be saved to disk
# to compare all clusters together
consumption_averages = readRDS("data/consumption_averages.rds")
benchmark(clust_obj = clusters, aggregates_list = consumption_averages, plot_title = "All clusters")
# to compare all clusters together
consumption_averages = readRDS("data/consumption_averages.rds")
benchmark(clust_obj = clusters, aggregates_list = consumption_averages, plot_title = "All clusters")
library(plotly)
plot_ly()
benchmark(clust_obj = clusters, aggregates_list = consumption_averages, plot_title = "All clusters")
# to benchmark customer (with service_id 20) with his/her cluster
benchmark(clust_obj = clusters, aggregates_list = consumption_averages, service_id = 20, plot_title = "one vs cluster")
library(water)
knitr::opts_chunk$set(echo = TRUE)
# Install package dependencies
# Devtools is needed fo installing Non-Standard packages from github and other repos
install.package('devtools')
library(devtools)
# Install the package from the repository, enter your bitbucket username and password in the arguments
devtools::install_bitbucket('cbergmeir/yvw/Package/water@master',
quiet = FALSE, auth_user = 'ozeidi', password = 'WadiFida*net1*MONASH')
# Install the package from the repository, enter your bitbucket username and password in the arguments
devtools::install_bitbucket('cbergmeir/yvw/Package/water@master',
quiet = FALSE, auth_user = 'ozeidi', password = 'WadiFida*net1*MONASH')
# Install the package from the repository, enter your bitbucket username and password in the arguments
devtools::install_bitbucket('cbergmeir/yvw/Package/water/@master',
quiet = FALSE, auth_user = 'ozeidi', password = 'WadiFida*net1*MONASH')
# Install the package from the repository, enter your bitbucket username and password in the arguments
devtools::install_bitbucket('cbergmeir/yvw/Package/water',
quiet = FALSE, auth_user = 'ozeidi', password = 'WadiFida*net1*MONASH')
# Install the package from the repository, enter your bitbucket username and password in the arguments
devtools::install_bitbucket('cbergmeir/yvw/Package/@master',
quiet = FALSE, auth_user = 'ozeidi', password = 'WadiFida*net1*MONASH')
install.packages("devtools")
install.packages("devtools")
knitr::opts_chunk$set(echo = TRUE)
# Install the package from the repository, enter your bitbucket username and password in the arguments
devtools::install_bitbucket('cbergmeir/yvw/Package/water/@master',
quiet = FALSE, auth_user = 'ozeidi', password = 'WadiFida*net1*MONASH')
# Install the package from the repository, enter your bitbucket username and password in the arguments
devtools::install_bitbucket('cbergmeir/yvw/Package/water@master',
quiet = FALSE, auth_user = 'ozeidi', password = 'WadiFida*net1*MONASH')
library(devtools)
# Install the package from the repository, enter your bitbucket username and password in the arguments
devtools::install_bitbucket('cbergmeir/yvw/Package/water@master',
quiet = FALSE, auth_user = 'ozeidi', password = 'WadiFida*net1*MONASH')
# Load the package
library(water, quietly = T)
# Load the package
library(water, quietly = T)
getwd()
#Read toy dataset for demonstration
meter_sample <-read_from_csv('data/sample_meter.csv',align_and_pad = TRUE)
#Read toy dataset for demonstration
meter_sample <-read_from_csv('data/sample_meter.csv',align_and_pad = TRUE)
document()
build()
# Load the package
library(water, quietly = T)
#Read toy dataset for demonstration
meter_sample <-read_from_csv('data/sample_meter.csv',align_and_pad = TRUE)
#Read toy dataset for demonstration
meter_sample <-read_from_csv('data/sample_meter.csv',align_and_pad = TRUE)
knitr::opts_chunk$set(echo = TRUE)
# Load the package
library(water, quietly = T)
getwd()
#Read toy dataset for demonstration
meter_sample <-read_from_csv('data/sample_meter.csv',align_and_pad = TRUE)
library(devtools)
devtools::install_bitbucket('cbergmeir/yvw/Package/water@master',
quiet = FALSE, auth_user = 'ozeidi', password = 'WadiFida*net1*MONASH',force = False)
install.packages("devtools")
install.packages("devtools")
devtools::install_bitbucket('cbergmeir/yvw/Package/water@master',
quiet = FALSE, auth_user = 'ozeidi', password = 'WadiFida*net1*MONASH',force = False)
library(water)
knitr::opts_chunk$set(echo = TRUE)
# Load the package
library(water, quietly = T)
getwd()
#Read toy dataset for demonstration
meter_sample <-read_from_csv('data/sample_meter.csv',align_and_pad = TRUE)
help(consumption_vis)
consumption_vis(meter_sample, output_format = 'pdf')
consumption_vis(meter_sample, output_format = 'pdf')
library(water)
knitr::opts_chunk$set(echo = TRUE)
# Load the package
library(water, quietly = T)
getwd()
#Read toy dataset for demonstration
meter_sample <-read_from_csv('data/sample_meter.csv',align_and_pad = TRUE)
consumption_vis(meter_sample, output_format = 'pdf')
knitr::opts_chunk$set(echo = TRUE)
# Load the package
library(water, quietly = T)
#Read toy dataset for demonstration
meter_sample <-read_from_csv('data/sample_meter.csv',align_and_pad = TRUE)
consumption_vis(meter_sample, output_format = 'pdf')
consumption_vis(meter_sample, output_format = 'png')
consumption_vis(meter_sample, output_format = 'pdf')
consumption_vis(meter_sample,,file_name = 'vis', output_format = 'pdf')
library(water)
knitr::opts_chunk$set(echo = TRUE)
consumption_vis(meter_sample,file_name = 'vis', output_format = 'pdf')
leak_detection(meter_sample,method = 'min',pdf_file = 'test_MIN')
customer_forecast_ets(meter_sample,plot_type = 'line',pdf_file = 'fcast')
#Conduct 24 hour consumption forecast for aggregatre consumption from the list of contracts passed to the function
# NOTE: This forecast could take few minutes to finish
hourly_forecasst(meter_sample,temp_file = 'data/IDCJAC0010_086282_1800_Data.csv',plot_type = 'line',pdf_file = 'fcast')
devtools::install_bitbucket('cbergmeir/yvw/Package/water@master',
quiet = FALSE, auth_user = 'ozeidi', password = 'WadiFida*net1*MONASH',force = False)
# Install the package from the repository, enter your bitbucket username and password in the arguments
devtools::install_bitbucket('cbergmeir/yvw/Package/water@master',
quiet = FALSE, auth_user = '', password = '',force = False)
library(devtools)
# Install the package from the repository, enter your bitbucket username and password in the arguments
devtools::install_bitbucket('cbergmeir/yvw/Package/water@master',
quiet = FALSE, auth_user = '', password = '',force = False)
# Install the package from the repository, enter your bitbucket username and password in the arguments
devtools::install_bitbucket('cbergmeir/yvw/Package/water@master',
quiet = FALSE, auth_user = 'ozeidi', password = 'WadiFida*net1*MONASH')
# Install the package from the repository, enter your bitbucket username and password in the arguments
devtools::install_bitbucket('cbergmeir/yvw/Package/water@master',
quiet = FALSE, auth_user = 'ozeidi', password = 'WadiFida*net1*MONASH')
# Install the package from the repository, enter your bitbucket username and password in the arguments
devtools::install_bitbucket('cbergmeir/yvw/Package/water@master',
quiet = FALSE, auth_user = 'ozeidi', password = 'WadiFida*net1*MONASH')
# Install the package from the repository, enter your bitbucket username and password in the arguments
devtools::install_bitbucket('cbergmeir/yvw/Package@master',
quiet = FALSE, auth_user = 'ozeidi', password = 'WadiFida*net1*MONASH')
document
document()
library(devtools)
document()
build()
# Install the package from the repository, enter your bitbucket username and password in the arguments
devtools::install_bitbucket('cbergmeir/yvw/Package@master',
quiet = FALSE, auth_user = 'ozeidi', password = 'WadiFida*net1*MONASH')
devtools::install_github("jayjacobs/ggcal")
# Install the package from the repository, enter your bitbucket username and password in the arguments
devtools::install_bitbucket('cbergmeir/yvw/Package/water@master',
quiet = FALSE, auth_user = 'ozeidi', password = 'WadiFida*net1*MONASH')
# Install the package from the repository, enter your bitbucket username and password in the arguments
devtools::install_bitbucket('cbergmeir/yvw/Package/water@master',
quiet = FALSE, auth_user = 'ozeidi', password = 'WadiFida*net1*MONASH')
knitr::opts_chunk$set(echo = TRUE)
# Install package dependencies
# Devtools is needed for installing Non-Standard packages from github and other repos
install.packages('devtools')
knitr::opts_chunk$set(echo = TRUE)
# Install package dependencies
# Devtools is needed for installing Non-Standard packages from github and other repos
install.packages('devtools')
# Install the package from the repository, enter your bitbucket username and password in the arguments
devtools::install_bitbucket('cbergmeir/yvw/Package/water@master',
quiet = FALSE, auth_user = 'ozeidi', password = 'WadiFida*net1*MONASH')
# Load the package
library(water, quietly = T)
#Read toy dataset for demonstration
meter_sample <-read_from_csv('data/sample_meter.csv',align_and_pad = TRUE)
consumption_vis(meter_sample,file_name = 'vis', output_format = 'pdf')
features <- read.csv("data/clean_features_potable_water.csv")
clusters <- calculate_clusters(features, k_max = 8)
consumption_averages <- calculate_consumption_aggregates(timeseries_list = meter_sample, filename = "cons_avgs.rds")  # note that if a filename is not given, the results won't be saved to disk
# to compare all clusters together
consumption_averages = readRDS("data/consumption_averages.rds")
benchmark(clust_obj = clusters, aggregates_list = consumption_averages, plot_title = "All clusters")
library(water)
document()
library(water)
library(water)
library(water)
knitr::opts_chunk$set(echo = TRUE)
benchmark(clust_obj = clusters, aggregates_list = consumption_averages, plot_title = "All clusters")
# to compare all clusters together
consumption_averages = readRDS("data/consumption_averages.rds")
benchmark(clust_obj = clusters, aggregates_list = consumption_averages, plot_title = "All clusters")
features <- read.csv("data/clean_features_potable_water.csv")
clusters <- calculate_clusters(features, k_max = 8)
knitr::opts_chunk$set(echo = TRUE)
# Load the package
library(water, quietly = T)
features <- read.csv("data/clean_features_potable_water.csv")
clusters <- calculate_clusters(features, k_max = 8)
consumption_averages <- calculate_consumption_aggregates(timeseries_list = meter_sample, filename = "cons_avgs.rds")  # note that if a filename is not given, the results won't be saved to disk
#Read toy dataset for demonstration
meter_sample <-read_from_csv('data/sample_meter.csv',align_and_pad = TRUE)
consumption_averages <- calculate_consumption_aggregates(timeseries_list = meter_sample, filename = "cons_avgs.rds")  # note that if a filename is not given, the results won't be saved to disk
# to compare all clusters together
consumption_averages = readRDS("data/consumption_averages.rds")
benchmark(clust_obj = clusters, aggregates_list = consumption_averages, plot_title = "All clusters")
build()
library(devtools)
document()
build()
benchmark(clust_obj = clusters, aggregates_list = consumption_averages, plot_title = "All clusters")
